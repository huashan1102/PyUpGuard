{"numpy.lib.function_base.iterable": ["<builtin>.iter"], "numpy.core.shape_base.atleast_1d": ["numpy.core._asarray.asanyarray", "<builtin>.len"], "numpy.core.defchararray.array": ["<builtin>.isinstance", "numpy.core.defchararray.chararray.__new__", "<builtin>.issubclass"], "numpy.core.numeric.ones": ["numpy.core.multiarray.copyto"], "numpy.lib.function_base.meshgrid": ["<builtin>.len", "<builtin>.TypeError", "<builtin>.list", "<builtin>.ValueError", "<builtin>.enumerate"], "numpy.core.shape_base.stack": ["numpy.core.shape_base._arrays_for_stack_dispatcher", "numpy.core._asarray.asanyarray", "<builtin>.ValueError", "<builtin>.len", "<builtin>.slice"], "numpy.ma.core._convert2ma.__init__": ["<builtin>.getattr", "numpy.ma.core._convert2ma.getdoc"], "numpy.core.fromnumeric.transpose": ["numpy.core.fromnumeric._wrapfunc"], "numpy.lib.function_base.interp": ["<builtin>.abs", "<builtin>.ValueError"], "numpy.core.getlimits.finfo.__new__": ["<builtin>.type", "<builtin>.issubclass", "<builtin>.ValueError"], "numpy.core.function_base.linspace": ["numpy.core.function_base._index_deprecate", "<builtin>.ValueError", "numpy.core._asarray.asanyarray", "numpy.core.multiarray.result_type", "<builtin>.float", "numpy.core.fromnumeric.ndim", "numpy.core.numeric.isscalar", "numpy.core.numeric.moveaxis"], "numpy.ma.core.filled": ["<builtin>.hasattr", "<builtin>.isinstance"], "numpy.lib.shape_base.column_stack": ["numpy.core.shape_base._arrays_for_stack_dispatcher", "numpy.core.defchararray.array"], "numpy.core.fromnumeric.any": ["numpy.core.fromnumeric._wrapreduction"], "numpy.ma.core.is_masked": ["numpy.ma.core.getmask"], "numpy.core.multiarray.concatenate": ["<builtin>.list"], "numpy.core.fromnumeric.all": ["numpy.core.fromnumeric._wrapreduction"], "numpy.core.shape_base.hstack": ["numpy.core.shape_base._arrays_for_stack_dispatcher", "numpy.core.shape_base.atleast_1d", "<builtin>.isinstance"], "numpy.lib.function_base.diff": ["<builtin>.ValueError", "<builtin>.repr", "numpy.core._asarray.asanyarray", "<builtin>.list", "<builtin>.tuple", "<builtin>.len", "<builtin>.slice", "<builtin>.range"], "numpy.core.defchararray.chararray.__new__": ["<builtin>.isinstance"], "numpy.core.shape_base._arrays_for_stack_dispatcher": ["<builtin>.hasattr", "warnings.warn"], "numpy.ma.core._convert2ma.getdoc": ["<builtin>.getattr", "numpy.ma.core.get_object_signature"], "numpy.core.fromnumeric._wrapfunc": ["<builtin>.getattr", "numpy.core.fromnumeric._wrapit"], "numpy.core.function_base._index_deprecate": ["operator.index", "<builtin>.int", "warnings.warn", "<builtin>.type"], "numpy.core.fromnumeric.ndim": ["numpy.core._asarray.asarray"], "numpy.core.numeric.isscalar": ["<builtin>.isinstance", "<builtin>.type"], "numpy.core.numeric.moveaxis": ["numpy.core._asarray.asarray", "numpy.core.numeric.normalize_axis_tuple", "<builtin>.len", "<builtin>.ValueError", "<builtin>.range", "<builtin>.sorted", "<builtin>.zip"], "numpy.core.fromnumeric._wrapreduction": ["<builtin>.type", "<builtin>.getattr"], "numpy.ma.core.getmask": ["<builtin>.getattr"], "numpy.ma.core.get_object_signature": ["numpy.compat._inspect.formatargspec", "numpy.compat._inspect.getargspec"], "numpy.core.fromnumeric._wrapit": ["<builtin>.getattr", "numpy.core._asarray.asarray", "<builtin>.isinstance"], "numpy.core.numeric.normalize_axis_tuple": ["<builtin>.type", "operator.index", "<builtin>.tuple", "<builtin>.len", "<builtin>.ValueError", "<builtin>.set"], "numpy.compat._inspect.formatargspec": ["<builtin>.len", "<builtin>.range", "numpy.compat._inspect.strseq"], "numpy.compat._inspect.getargspec": ["numpy.compat._inspect.ismethod", "numpy.compat._inspect.isfunction", "<builtin>.TypeError", "numpy.compat._inspect.getargs"], "numpy.compat._inspect.strseq": ["<builtin>.type", "numpy.compat._inspect.strseq"], "numpy.compat._inspect.ismethod": ["<builtin>.isinstance"], "numpy.compat._inspect.isfunction": ["<builtin>.isinstance"], "numpy.compat._inspect.getargs": ["numpy.compat._inspect.iscode", "<builtin>.TypeError", "<builtin>.list", "<builtin>.range"], "numpy.compat._inspect.iscode": ["<builtin>.isinstance"]}