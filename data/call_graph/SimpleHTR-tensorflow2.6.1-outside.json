{"numpy": ["numpy.broadcast_to", "numpy.arange", "numpy.isscalar", "numpy.array", "numpy.dtype", "numpy.prod", "numpy.ndarray", "numpy.concatenate", "numpy.split", "numpy.full", "numpy.equal", "numpy.not_equal", "numpy.zeros", "numpy.any", "numpy.all", "numpy.ones", "numpy.frombuffer", "numpy.fromiter", "numpy.pad", "numpy.asarray", "numpy.empty", "numpy.array_equal"], "<builtin>": ["<builtin>.isinstance", "<builtin>.ValueError", "<builtin>.super", "<builtin>.callable", "<builtin>.dict", "<builtin>.RuntimeError", "<builtin>.bool", "<builtin>.len", "<builtin>.TypeError", "<builtin>.set", "<builtin>.id", "<builtin>.enumerate", "<builtin>.any", "<builtin>.str", "<builtin>.next", "<builtin>.type", "<builtin>.list", "<builtin>.getattr", "<builtin>.hasattr", "<builtin>.NotImplementedError", "<builtin>.zip", "<builtin>.tuple", "<builtin>.all", "<builtin>.sorted", "<builtin>.repr", "<builtin>.map", "<builtin>.int", "<builtin>.max", "<builtin>.issubclass", "<builtin>.iter", "<builtin>.bytes", "<builtin>.range", "<builtin>.globals", "<builtin>.float", "<builtin>.reversed", "<builtin>.complex", "<builtin>.dir", "<builtin>.memoryview", "<builtin>.object", "<builtin>.AssertionError"], "warnings": ["warnings.warn"], "time": ["time.time", "time.sleep"], "six": ["six.raise_from", "six.iteritems"], "threading": ["threading.Lock", "threading.RLock", "threading.local", "threading.Condition"], "functools": ["functools.partial"], "google": ["google.protobuf.text_format.Merge"], "os": ["os.path.isabs", "os.path.join", "os.environ.get", "os.path.normpath"], "tensorflow": ["tensorflow.python.client._pywrap_tf_session._TF_NewSessionOptions", "tensorflow.python.client._pywrap_tf_session._TF_SetTarget", "tensorflow.python.client._pywrap_tf_session._TF_SetConfig"], "logging": ["logging.getLogger", "logging.StreamHandler", "logging.Formatter"], "inspect": ["inspect.isclass", "inspect.isfunction"], "collections": ["collections.OrderedDict", "collections.defaultdict"], "sys": ["sys._getframe"], "weakref": ["weakref.ref"], "re": ["re.sub"], "json": ["json.loads"], "copy": ["copy.deepcopy"]}