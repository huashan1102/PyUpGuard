{"torch.random.manual_seed": ["<builtin>.int", "torch._C.default_generator.manual_seed"], "torch.utils.data.sampler.RandomSampler.__init__": ["<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.ValueError"], "torch.nn.utils.clip_grad.clip_grad_norm_": ["<builtin>.isinstance", "<builtin>.list", "<builtin>.filter", "<builtin>.float", "<builtin>.len", "<builtin>.max"], "torch.utils.data.dataloader.DataLoader.__init__": ["<builtin>.ValueError", "<builtin>.isinstance", "torch.utils.data.dataloader._InfiniteConstantSampler.__init__"], "torch.cuda.is_available": ["<builtin>.hasattr", "torch._C._cuda_isDriverSufficient", "torch._C._cuda_getDeviceCount"], "torch.utils.data.dataset.TensorDataset.__init__": ["<builtin>.all"], "torch.serialization.save": ["torch.serialization._check_dill_version", "torch.serialization._open_file_like", "torch.serialization._legacy_save", "torch.serialization._open_zipfile_writer", "torch.serialization._save"], "torch.testing._internal.hypothesis_utils.tensor": ["<builtin>.isinstance", "hypothesis.strategies.sampled_from", "hypothesis.assume", "torch.testing._internal.hypothesis_utils.floats", "hypothesis.extra.numpy.arrays", "numpy.isnan", "numpy.isinf", "torch.testing._internal.hypothesis_utils._get_valid_min_max", "torch.testing._internal.common_quantized._calculate_dynamic_qparams"], "torch.cuda.random.manual_seed_all": ["<builtin>.int", "<builtin>.range", "torch.cuda.device_count", "torch.cuda._lazy_call"], "torch.nn.modules.loss.MSELoss.__init__": ["torch.nn.modules.loss._Loss.__init__", "<builtin>.super"], "torch.nn.modules.loss.CrossEntropyLoss.__init__": ["torch.nn.modules.loss._WeightedLoss.__init__", "<builtin>.super"], "torch.serialization.load": ["torch.serialization._check_dill_version", "torch.serialization._open_file_like", "torch.serialization._is_zipfile", "torch.serialization._legacy_load", "torch.serialization._open_zipfile_reader.__init__", "torch.serialization._is_torchscript_zip", "torch.serialization._load", "warnings.warn"], "torch.nn.modules.dropout.Dropout.__default_init__": ["torch.nn.modules.dropout._DropoutNd.__init__", "torch.nn.modules.module.Module.__init__"], "torch.nn.modules.linear.Linear.__init__": ["torch.nn.modules.module.Module.__init__", "<builtin>.super", "torch.nn.parameter.Parameter.__new__", "torch.nn.modules.module.Module.register_parameter", "torch.nn.modules.linear.Linear.reset_parameters"], "torch.utils.data.dataloader._InfiniteConstantSampler.__init__": ["<builtin>.super"], "torch.serialization._check_dill_version": ["torch.serialization.check_module_version_greater_or_equal", "<builtin>.ValueError", "<builtin>.str"], "torch.serialization._open_file_like": ["torch.serialization._is_path", "torch.serialization._open_file.__init__", "torch.serialization._open_buffer_writer.__default_init__", "torch.serialization._open_buffer_reader.__init__", "<builtin>.RuntimeError"], "torch.serialization._legacy_save": ["<builtin>.isinstance", "<builtin>.issubclass", "torch.is_storage", "torch._utils_internal.get_source_lines_and_file", "torch.serialization.normalize_storage_type", "<builtin>.str", "torch.serialization.location_tag", "warnings.warn", "<builtin>.type", "<builtin>.dict", "<builtin>.sorted", "torch.serialization._should_read_directly"], "torch.serialization._open_zipfile_writer": ["torch.serialization._is_path"], "torch.serialization._save": ["torch.is_storage", "torch.serialization.normalize_storage_type", "<builtin>.str", "torch.serialization.location_tag", "<builtin>.type", "io.BytesIO", "<builtin>.len", "<builtin>.sorted", "torch.serialization._should_read_directly"], "torch.testing._internal.hypothesis_utils.floats": ["torch.testing._internal.hypothesis_utils._floats_wrapper"], "torch.testing._internal.hypothesis_utils._get_valid_min_max": ["<builtin>.max", "<builtin>.min", "numpy.float32"], "torch.testing._internal.common_quantized._calculate_dynamic_qparams": ["<builtin>.isinstance", "<builtin>.max", "<builtin>.min", "<builtin>.round", "numpy.finfo", "<builtin>.float", "<builtin>.int"], "torch.cuda.device_count": ["torch.cuda.is_available", "torch._C._cuda_getDeviceCount"], "torch.cuda._lazy_call": ["torch.cuda.is_initialized", "<builtin>.callable", "traceback.format_stack"], "torch.nn.modules.loss._Loss.__init__": ["torch.nn.modules.module.Module.__init__", "<builtin>.super", "torch.nn._reduction.legacy_get_string"], "torch.nn.modules.loss._WeightedLoss.__init__": ["torch.nn.modules.loss._Loss.__init__", "<builtin>.super", "torch.nn.modules.module.Module.register_buffer"], "torch.serialization._is_zipfile": ["<builtin>.len"], "torch.serialization._legacy_load": ["torch.serialization._get_restore_location", "warnings.warn", "difflib.unified_diff", "torch._utils_internal.get_source_lines_and_file", "torch.typename", "<builtin>.open", "<builtin>.len", "<builtin>.isinstance", "contextlib.closing", "torch.serialization.mkdtemp", "<builtin>.all", "<builtin>.int", "tarfile.open", "<builtin>.range", "os.path.join", "torch.serialization.storage_to_tensor_type", "struct.unpack", "torch.serialization._maybe_decode_ascii", "<builtin>.RuntimeError", "torch.serialization._check_seekable", "torch.serialization._should_read_directly", "torch.serialization._is_zipfile", "<builtin>.hasattr", "<builtin>.type"], "torch.serialization._open_zipfile_reader.__init__": ["<builtin>.super"], "torch.serialization._is_torchscript_zip": ["<builtin>.len"], "torch.serialization._load": ["torch.serialization._get_restore_location", "<builtin>.isinstance", "torch.serialization._maybe_decode_ascii", "io.BytesIO"], "torch.nn.modules.dropout._DropoutNd.__init__": ["torch.nn.modules.module.Module.__init__", "<builtin>.super", "<builtin>.ValueError"], "torch.nn.modules.module.Module.__init__": ["collections.OrderedDict", "<builtin>.set"], "torch.nn.modules.module.Module.register_parameter": ["<builtin>.AttributeError", "<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.KeyError", "torch.typename", "<builtin>.hasattr", "<builtin>.ValueError"], "torch.nn.modules.linear.Linear.reset_parameters": ["torch.nn.init.kaiming_uniform_", "math.sqrt", "torch.nn.init._calculate_fan_in_and_fan_out", "torch.nn.init.uniform_"], "torch.serialization.check_module_version_greater_or_equal": ["<builtin>.tuple", "<builtin>.RuntimeError", "warnings.warn", "<builtin>.type", "<builtin>.enumerate", "<builtin>.str"], "torch.serialization._is_path": ["<builtin>.isinstance"], "torch.serialization._open_file.__init__": ["<builtin>.open", "<builtin>.super"], "torch.serialization._open_buffer_writer.__default_init__": ["torch.serialization._opener.__init__"], "torch.serialization._open_buffer_reader.__init__": ["torch.serialization._opener.__init__", "<builtin>.super", "torch.serialization._check_seekable"], "torch": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.hasattr"], "torch._utils_internal.get_source_lines_and_file": ["inspect.getsourcefile", "inspect.getsourcelines", "<builtin>.OSError"], "torch.serialization.normalize_storage_type": ["<builtin>.getattr"], "torch.serialization.location_tag": ["<builtin>.RuntimeError", "torch.typename"], "torch.serialization._should_read_directly": ["torch.serialization._is_compressed_file"], "torch.testing._internal.hypothesis_utils._floats_wrapper": ["<builtin>.len", "hypothesis.strategies.floats"], "torch.nn._reduction.legacy_get_string": ["warnings.warn"], "torch.nn.modules.module.Module.register_buffer": ["<builtin>.isinstance", "<builtin>.RuntimeError", "<builtin>.AttributeError", "<builtin>.TypeError", "<builtin>.KeyError", "torch.typename", "<builtin>.hasattr"], "torch.serialization._get_restore_location": ["<builtin>.isinstance", "torch.serialization.default_restore_location", "<builtin>.str"], "torch.serialization.mkdtemp": ["tempfile.mkdtemp", "shutil.rmtree"], "torch.serialization.storage_to_tensor_type": ["<builtin>.type", "torch._utils._import_dotted_name", "<builtin>.getattr"], "torch.serialization._maybe_decode_ascii": ["<builtin>.isinstance"], "torch.serialization._check_seekable": ["<builtin>.str", "<builtin>.type"], "torch.nn.init.kaiming_uniform_": ["torch.nn.init._calculate_correct_fan", "torch.nn.init.calculate_gain", "math.sqrt"], "torch.nn.init._calculate_fan_in_and_fan_out": ["<builtin>.ValueError"], "torch.nn.init.uniform_": ["torch.nn.init._no_grad_uniform_"], "torch.serialization.default_restore_location": ["<builtin>.RuntimeError", "torch.typename"], "torch._utils._import_dotted_name": ["<builtin>.__import__", "<builtin>.getattr"], "torch.nn.init._calculate_correct_fan": ["<builtin>.ValueError", "torch.nn.init._calculate_fan_in_and_fan_out"], "torch.nn.init.calculate_gain": ["math.sqrt", "<builtin>.ValueError", "<builtin>.isinstance"]}