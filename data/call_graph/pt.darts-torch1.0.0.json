{"torch.onnx.symbolic.cat": ["torch.onnx.symbolic._unpack_list"], "torch.nn.parallel.parallel_apply.parallel_apply": ["<builtin>.len", "<builtin>.list", "<builtin>.map", "torch.cuda._utils._get_device_index", "threading.Lock", "torch.nn.parallel.parallel_apply.get_a_var", "<builtin>.isinstance", "threading.Thread", "<builtin>.enumerate", "<builtin>.zip", "<builtin>.range"], "torch.cuda.random.manual_seed_all": ["<builtin>.int", "torch.cuda._lazy_call"], "torch.serialization.save": ["torch.serialization._with_file_like", "torch.serialization._save"], "torch.nn.parallel.scatter_gather.gather": ["<builtin>.isinstance", "<builtin>.type", "<builtin>.map", "<builtin>.all", "<builtin>.ValueError", "<builtin>.zip", "<builtin>.len"], "torch.nn.parallel.data_parallel.DataParallel.__init__": ["torch.nn.modules.module.Module.__init__", "<builtin>.super", "<builtin>.list", "<builtin>.range", "<builtin>.map", "torch.cuda._utils._get_device_index", "torch.nn.parallel.data_parallel._check_balance", "<builtin>.len"], "torch.nn.parallel.scatter_gather.scatter": ["<builtin>.isinstance", "<builtin>.list", "<builtin>.len", "<builtin>.zip", "<builtin>.map", "<builtin>.type"], "torch.onnx.symbolic.randn": ["<builtin>.list", "torch.onnx.symbolic._maybe_get_const"], "torch.cuda.set_device": ["torch.cuda._utils._get_device_index"], "torch.random.manual_seed": ["<builtin>.int", "torch._C.default_generator.manual_seed"], "torch.nn.utils.clip_grad.clip_grad_norm_": ["<builtin>.isinstance", "<builtin>.list", "<builtin>.filter", "<builtin>.float", "<builtin>.max"], "torch.optim.adam.Adam.__init__": ["<builtin>.ValueError", "<builtin>.dict", "torch.optim.optimizer.Optimizer.__init__", "<builtin>.super"], "torch.nn.modules.container.ParameterList.__init__": ["torch.nn.modules.module.Module.__init__", "<builtin>.super"], "torch.nn.modules.conv.Conv2d.__init__": ["torch.nn.modules.utils._ntuple", "<builtin>.super"], "torch.nn.modules.pooling.AvgPool2d.__init__": ["torch.nn.modules.module.Module.__init__", "<builtin>.super"], "torch.nn.modules.pooling.MaxPool2d.__default_init__": ["torch.nn.modules.pooling._MaxPoolNd.__init__", "torch.nn.modules.module.Module.__init__"], "torch.nn.modules.loss.CrossEntropyLoss.__init__": ["torch.nn.modules.loss._WeightedLoss.__init__", "<builtin>.super"], "torch.cuda.device_count": ["torch.cuda.is_available"], "torch.nn.modules.linear.Linear.__init__": ["torch.nn.modules.module.Module.__init__", "<builtin>.super", "torch.nn.parameter.Parameter.__new__", "torch.nn.modules.module.Module.register_parameter", "torch.nn.modules.linear.Linear.reset_parameters"], "torch.nn.modules.pooling.AdaptiveAvgPool2d.__default_init__": ["torch.nn.modules.pooling._AdaptiveAvgPoolNd.__init__", "torch.nn.modules.module.Module.__init__"], "torch.nn.modules.activation.ReLU.__init__": ["torch.nn.modules.activation.Threshold.__init__", "<builtin>.super"], "torch.onnx.symbolic.topk": ["torch.onnx.symbolic._unimplemented"], "torch.nn.modules.batchnorm.BatchNorm2d.__default_init__": ["torch.nn.modules.batchnorm._BatchNorm.__init__", "torch.nn.modules.module.Module.__init__"], "torch.utils.data.dataloader.DataLoader.__init__": ["<builtin>.ValueError", "torch.utils.data.sampler.BatchSampler.__init__", "torch.utils.data.sampler.RandomSampler.__init__", "torch.utils.data.sampler.SequentialSampler.__init__"], "torch.nn.parallel.replicate.replicate": ["<builtin>.list", "<builtin>.map", "torch.cuda._utils._get_device_index", "<builtin>.len", "<builtin>.enumerate", "<builtin>.range", "torch.cuda.comm.broadcast_coalesced", "<builtin>.type"], "torch.autograd.grad": ["warnings.warn", "<builtin>.isinstance", "<builtin>.tuple", "<builtin>.len", "<builtin>.list", "torch.autograd._make_grads"], "torch.nn.modules.container.ModuleList.__init__": ["torch.nn.modules.module.Module.__init__", "<builtin>.super"], "torch.nn.modules.container.Sequential.__init__": ["torch.nn.modules.module.Module.__init__", "<builtin>.super", "<builtin>.isinstance", "<builtin>.enumerate", "<builtin>.len", "torch.nn.modules.module.Module.add_module", "<builtin>.str"], "torch.nn.modules.module.Module.__init__": ["collections.OrderedDict"], "torch.nn.modules.module.Module.apply": ["torch.nn.modules.module.Module.children"], "torch.nn.utils.spectral_norm.SpectralNorm.__init__": ["<builtin>.ValueError"], "torch.nn.utils.spectral_norm.SpectralNorm.apply": ["<builtin>.isinstance", "<builtin>.RuntimeError", "torch.nn.utils.spectral_norm.SpectralNorm.__init__", "torch.nn.utils.spectral_norm.SpectralNorm.reshape_weight_to_matrix", "torch.nn.functional.normalize", "<builtin>.delattr", "<builtin>.setattr", "torch.nn.utils.spectral_norm.SpectralNormStateDictHook.__init__", "torch.nn.utils.spectral_norm.SpectralNormLoadStateDictPreHook.__init__"], "torch.nn.utils.weight_norm.WeightNorm.apply": ["<builtin>.isinstance", "<builtin>.RuntimeError", "torch.nn.utils.weight_norm.WeightNorm.__init__", "<builtin>.getattr", "torch.nn.parameter.Parameter.__new__", "<builtin>.setattr", "torch.nn.utils.weight_norm.WeightNorm.compute_weight"], "torch.cuda.device.__init__": ["torch.cuda._utils._get_device_index"], "torch.optim.sgd.SGD.__init__": ["<builtin>.ValueError", "<builtin>.dict", "torch.optim.optimizer.Optimizer.__init__", "<builtin>.super"], "torch.onnx.symbolic._unpack_list": ["<builtin>.list"], "torch.cuda._utils._get_device_index": ["<builtin>.isinstance", "<builtin>.ValueError"], "torch.nn.parallel.parallel_apply.get_a_var": ["<builtin>.isinstance", "<builtin>.map"], "torch.cuda._lazy_call": ["<builtin>.callable", "traceback.format_stack"], "torch.serialization._with_file_like": ["<builtin>.isinstance", "<builtin>.open"], "torch.serialization._save": ["<builtin>.isinstance", "<builtin>.RuntimeError", "<builtin>.issubclass", "torch.is_storage", "inspect.getsourcefile", "inspect.getsource", "torch.serialization.normalize_storage_type", "<builtin>.str", "torch.serialization.location_tag", "warnings.warn", "<builtin>.type", "<builtin>.dict", "<builtin>.sorted", "torch.serialization._should_read_directly"], "torch.nn.parallel.data_parallel._check_balance": ["<builtin>.list", "<builtin>.map", "torch.cuda._utils._get_device_index", "<builtin>.min", "<builtin>.max", "<builtin>.enumerate", "warnings.warn", "operator.itemgetter"], "torch.onnx.symbolic._maybe_get_const": ["torch.onnx.symbolic._is_value", "torch.onnx.symbolic._parse_arg"], "torch.optim.optimizer.Optimizer.__init__": ["<builtin>.isinstance", "<builtin>.TypeError", "torch.typename", "collections.defaultdict", "<builtin>.list", "<builtin>.len", "<builtin>.ValueError", "torch.optim.optimizer.Optimizer.add_param_group"], "torch.nn.modules.utils._ntuple": ["<builtin>.isinstance", "<builtin>.tuple", "itertools.repeat"], "torch.nn.modules.pooling._MaxPoolNd.__init__": ["torch.nn.modules.module.Module.__init__", "<builtin>.super"], "torch.nn.modules.loss._WeightedLoss.__init__": ["torch.nn.modules.loss._Loss.__init__", "<builtin>.super", "torch.nn.modules.module.Module.register_buffer"], "torch.cuda.is_available": ["<builtin>.hasattr"], "torch.nn.modules.module.Module.register_parameter": ["<builtin>.AttributeError", "<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.KeyError", "torch.typename", "<builtin>.hasattr", "<builtin>.ValueError"], "torch.nn.modules.linear.Linear.reset_parameters": ["torch.nn.init.kaiming_uniform_", "math.sqrt", "torch.nn.init._calculate_fan_in_and_fan_out", "torch.nn.init.uniform_"], "torch.nn.modules.pooling._AdaptiveAvgPoolNd.__init__": ["torch.nn.modules.module.Module.__init__", "<builtin>.super"], "torch.nn.modules.activation.Threshold.__init__": ["torch.nn.modules.module.Module.__init__", "<builtin>.super"], "torch.onnx.symbolic._unimplemented": ["warnings.warn"], "torch.nn.modules.batchnorm._BatchNorm.__init__": ["torch.nn.modules.module.Module.__init__", "<builtin>.super", "torch.nn.parameter.Parameter.__new__", "torch.nn.modules.module.Module.register_parameter", "torch.nn.modules.module.Module.register_buffer", "torch.nn.modules.batchnorm._BatchNorm.reset_parameters"], "torch.utils.data.sampler.BatchSampler.__init__": ["<builtin>.isinstance", "<builtin>.ValueError"], "torch.utils.data.sampler.RandomSampler.__init__": ["<builtin>.ValueError", "<builtin>.len", "<builtin>.isinstance"], "torch.autograd._make_grads": ["<builtin>.zip", "<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.RuntimeError", "<builtin>.type", "<builtin>.tuple"], "torch.nn.modules.module.Module.add_module": ["<builtin>.TypeError", "<builtin>.isinstance", "torch.typename", "<builtin>.hasattr", "<builtin>.KeyError"], "torch.nn.modules.module.Module.children": ["torch.nn.modules.module.Module.named_children"], "torch.nn.utils.spectral_norm.SpectralNorm.reshape_weight_to_matrix": ["<builtin>.range"], "torch.nn.utils.weight_norm.WeightNorm.compute_weight": ["<builtin>.getattr"], "torch": ["<builtin>.type", "<builtin>.isinstance", "<builtin>.hasattr"], "torch.serialization.normalize_storage_type": ["<builtin>.getattr"], "torch.serialization.location_tag": ["<builtin>.RuntimeError", "torch.typename"], "torch.serialization._should_read_directly": ["torch.serialization._is_compressed_file"], "torch.onnx.symbolic._is_value": ["<builtin>.isinstance"], "torch.onnx.symbolic._parse_arg": ["torch.onnx.symbolic._is_value", "<builtin>.RuntimeError", "<builtin>.int", "<builtin>.float"], "torch.optim.optimizer.Optimizer.add_param_group": ["<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.list", "<builtin>.ValueError", "torch.typename", "<builtin>.set"], "torch.nn.modules.loss._Loss.__init__": ["torch.nn.modules.module.Module.__init__", "<builtin>.super", "torch.nn._reduction.legacy_get_string"], "torch.nn.modules.module.Module.register_buffer": ["<builtin>.isinstance", "<builtin>.TypeError", "<builtin>.KeyError", "torch.typename", "<builtin>.hasattr"], "torch.nn.init.kaiming_uniform_": ["torch.nn.init._calculate_correct_fan", "torch.nn.init.calculate_gain", "math.sqrt"], "torch.nn.init._calculate_fan_in_and_fan_out": ["<builtin>.ValueError"], "torch.nn.modules.batchnorm._BatchNorm.reset_parameters": ["torch.nn.modules.batchnorm._BatchNorm.reset_running_stats", "torch.nn.init.uniform_", "torch.nn.init.zeros_"], "torch.nn.modules.module.Module.named_children": ["<builtin>.set", "collections.OrderedDict.items"], "torch.nn._reduction.legacy_get_string": ["warnings.warn"], "torch.nn.init._calculate_correct_fan": ["<builtin>.ValueError", "torch.nn.init._calculate_fan_in_and_fan_out"], "torch.nn.init.calculate_gain": ["math.sqrt", "<builtin>.ValueError", "<builtin>.isinstance"]}