{"numpy.ma.core._DomainedBinaryOperation.__init__": ["numpy.ma.core._MaskedUFunc.__init__", "<builtin>.super"], "numpy.core.defchararray.array": ["<builtin>.isinstance", "numpy.core.defchararray.chararray.__new__", "<builtin>.issubclass"], "numpy.ma.core._extrema_operation.__init__": ["numpy.ma.core._MaskedUFunc.__init__", "<builtin>.super"], "numpy.core.fromnumeric.any": ["numpy.core.fromnumeric._wrapreduction"], "numpy.core.shape_base.atleast_1d": ["numpy.core.numeric.asanyarray", "<builtin>.len"], "numpy.core.numeric.ones_like": ["numpy.core.multiarray.empty_like", "numpy.core.multiarray.copyto"], "numpy.lib._version.NumpyVersion.__init__": ["re.match", "<builtin>.ValueError", "<builtin>.int", "<builtin>.len", "<builtin>.bool", "re.search"], "numpy.ma.core._convert2ma.__init__": ["<builtin>.getattr", "numpy.ma.core._convert2ma.getdoc"], "numpy.lib.function_base.meshgrid": ["<builtin>.len", "<builtin>.TypeError", "<builtin>.list", "<builtin>.ValueError", "<builtin>.enumerate"], "numpy.core.fromnumeric.swapaxes": ["numpy.core.fromnumeric._wrapfunc"], "numpy.core.fromnumeric.reshape": ["numpy.core.fromnumeric._wrapfunc"], "numpy.linalg.linalg.inv": ["numpy.linalg.linalg._makearray", "numpy.linalg.linalg._assertRankAtLeast2", "numpy.linalg.linalg._assertNdSquareness", "numpy.linalg.linalg._commonType", "numpy.linalg.linalg.isComplexType", "numpy.linalg.linalg.get_linalg_error_extobj"], "numpy.lib.shape_base.dstack": ["numpy.core.shape_base._warn_for_nonsequence", "numpy.ma.extras._fromnxfunction_allargs.__default_init__"], "numpy.core.numeric.isscalar": ["<builtin>.isinstance", "<builtin>.type"], "numpy.lib.twodim_base.eye": ["numpy.ma.core._convert2ma.__init__"], "numpy.core.fromnumeric.all": ["numpy.core.fromnumeric._wrapreduction"], "numpy.core.numeric.full": ["numpy.core.multiarray.copyto"], "numpy.linalg.linalg.svd": ["numpy.linalg.linalg._makearray", "numpy.linalg.linalg._assertRankAtLeast2", "numpy.linalg.linalg._commonType", "numpy.linalg.linalg.get_linalg_error_extobj", "numpy.linalg.linalg.isComplexType", "numpy.linalg.linalg._realType"], "numpy.lib.twodim_base.diag": ["numpy.core.numeric.asanyarray", "<builtin>.len", "numpy.ma.core._convert2ma.__init__", "<builtin>.abs", "numpy.core.fromnumeric.diagonal", "<builtin>.ValueError"], "numpy.lib.shape_base.tile": ["<builtin>.tuple", "<builtin>.len", "<builtin>.all", "<builtin>.isinstance", "<builtin>.zip"], "numpy.lib.scimath.sqrt": ["numpy.lib.scimath._fix_real_lt_zero"], "numpy.core.fromnumeric.amax": ["numpy.core.fromnumeric._wrapreduction"], "numpy.core.numeric.isclose": ["numpy.core.numeric.errstate.__init__", "<builtin>.abs", "numpy.core.numeric.asanyarray", "numpy.core.multiarray.result_type", "<builtin>.all", "numpy.core.numeric.zeros_like", "numpy.core.numeric.ones_like"], "numpy.core.fromnumeric.clip": ["numpy.core.fromnumeric._wrapfunc"], "numpy.core.fromnumeric.ravel": ["<builtin>.isinstance", "numpy.core.numeric.asarray", "numpy.core.numeric.asanyarray"], "numpy.testing._private.utils.assert_allclose": ["numpy.testing._private.utils.assert_array_compare", "<builtin>.str"], "numpy.core.fromnumeric.round_": ["numpy.core.fromnumeric.around"], "numpy.core.numeric.indices": ["<builtin>.tuple", "<builtin>.len", "<builtin>.enumerate"], "numpy.core.fromnumeric.mean": ["<builtin>.type", "numpy.core.fromnumeric.mean", "numpy.core._methods._mean"], "numpy.core.fromnumeric.sum": ["<builtin>.isinstance", "warnings.warn", "numpy.core.fromnumeric._wrapreduction"], "numpy.core.numeric.full_like": ["numpy.core.multiarray.empty_like", "numpy.core.multiarray.copyto"], "numpy.core.multiarray.concatenate": ["<builtin>.list"], "numpy.core.numeric.ones": ["numpy.core.multiarray.copyto"], "numpy.core._internal.AxisError.__init__": ["<builtin>.super"], "numpy.ma.core.MaskedArray.__new__": ["<builtin>.getattr", "<builtin>.type", "<builtin>.isinstance", "<builtin>.hasattr", "numpy.ma.core.make_mask_descr", "numpy.ma.core.MaskError.__default_init__", "numpy.ma.core.getmask", "numpy.ma.core.getmaskarray", "<builtin>.tuple", "<builtin>.len", "numpy.ma.core._check_fill_value"], "numpy.ma.core.MaskedArray.dtype": ["<builtin>.super", "<builtin>.type", "numpy.ma.core.make_mask_descr"], "numpy.core.numerictypes.issubdtype": ["numpy.core.numerictypes.issubclass_", "<builtin>.isinstance", "warnings.warn", "<builtin>.len", "<builtin>.repr", "<builtin>.issubclass"], "numpy.core.numerictypes.obj2sctype": ["<builtin>.isinstance", "<builtin>.issubclass"], "numpy.core.getlimits.iinfo.__init__": ["<builtin>.type", "<builtin>.ValueError"], "numpy.core.fromnumeric.amin": ["numpy.core.fromnumeric._wrapreduction"], "numpy.core.defchararray.multiply": ["<builtin>.issubclass", "<builtin>.ValueError", "numpy.core.defchararray._get_num_chars", "<builtin>.max"], "numpy.ma.core._MaskedUnaryOperation.__init__": ["numpy.ma.core._MaskedUFunc.__init__", "<builtin>.super"], "numpy.core.defchararray.add": ["numpy.core.defchararray._get_num_chars", "numpy.core.defchararray._use_unicode"], "numpy.core.defchararray.chararray.__new__": ["<builtin>.isinstance"], "numpy.core.fromnumeric._wrapreduction": ["<builtin>.type", "<builtin>.getattr"], "numpy.ma.core._convert2ma.getdoc": ["<builtin>.getattr", "numpy.ma.core.get_object_signature"], "numpy.core.fromnumeric._wrapfunc": ["<builtin>.getattr", "numpy.core.fromnumeric._wrapit"], "numpy.linalg.linalg._makearray": ["numpy.core.numeric.asarray", "<builtin>.getattr"], "numpy.linalg.linalg._assertRankAtLeast2": ["numpy.linalg.linalg.LinAlgError.__default_init__"], "numpy.linalg.linalg._assertNdSquareness": ["numpy.linalg.linalg.LinAlgError.__default_init__"], "numpy.linalg.linalg._commonType": ["<builtin>.issubclass", "numpy.linalg.linalg.isComplexType", "numpy.linalg.linalg._realType", "<builtin>.TypeError"], "numpy.linalg.linalg.isComplexType": ["<builtin>.issubclass"], "numpy.linalg.linalg.get_linalg_error_extobj": ["<builtin>.list"], "numpy.core.shape_base._warn_for_nonsequence": ["numpy.core.shape_base._arrays_for_stack_dispatcher"], "numpy.core.fromnumeric.diagonal": ["<builtin>.isinstance", "numpy.core.numeric.asarray", "numpy.core.numeric.asanyarray"], "numpy.lib.scimath._fix_real_lt_zero": ["numpy.core.numeric.asarray", "numpy.core.fromnumeric.any", "numpy.lib.scimath._tocomplex", "numpy.lib.type_check.isreal"], "numpy.core.numeric.zeros_like": ["numpy.core.multiarray.empty_like", "numpy.core.multiarray.copyto"], "numpy.testing._private.utils.assert_array_compare": ["numpy.core.defchararray.array", "numpy.testing._private.utils.build_err_msg", "<builtin>.AssertionError", "<builtin>.isinstance", "traceback.format_exc", "<builtin>.ValueError", "numpy.core.numeric.errstate.__init__", "<builtin>.abs", "<builtin>.str", "numpy.core.arrayprint.array2string"], "numpy.core.fromnumeric.around": ["numpy.core.fromnumeric._wrapfunc"], "numpy.core._methods._mean": ["numpy.core.numeric.asanyarray", "numpy.core._methods._count_reduce_items", "warnings.warn", "<builtin>.issubclass", "<builtin>.isinstance", "<builtin>.hasattr"], "numpy.ma.core.make_mask_descr": ["numpy.ma.core._replace_dtype_fields"], "numpy.ma.core.getmask": ["<builtin>.getattr"], "numpy.ma.core.getmaskarray": ["numpy.ma.core.getmask", "numpy.ma.core.make_mask_none", "<builtin>.getattr"], "numpy.ma.core._check_fill_value": ["numpy.ma.core.default_fill_value", "<builtin>.isinstance", "<builtin>.TypeError", "numpy.ma.core._recursive_set_fill_value", "<builtin>.ValueError"], "numpy.core.numerictypes.issubclass_": ["<builtin>.issubclass"], "numpy.core.defchararray._get_num_chars": ["<builtin>.issubclass"], "numpy.core.defchararray._use_unicode": ["<builtin>.isinstance", "<builtin>.issubclass"], "numpy.ma.core.get_object_signature": ["numpy.compat._inspect.formatargspec", "numpy.compat._inspect.getargspec"], "numpy.core.fromnumeric._wrapit": ["<builtin>.getattr", "numpy.core.numeric.asarray", "<builtin>.isinstance"], "numpy.core.shape_base._arrays_for_stack_dispatcher": ["<builtin>.hasattr", "warnings.warn"], "numpy.lib.scimath._tocomplex": ["<builtin>.issubclass"], "numpy.lib.type_check.isreal": ["numpy.lib.type_check.imag"], "numpy.testing._private.utils.build_err_msg": ["<builtin>.len", "<builtin>.enumerate", "<builtin>.isinstance", "functools.partial", "<builtin>.type"], "numpy.core.arrayprint.array2string": ["<builtin>.TypeError", "numpy.core.arrayprint._make_options_dict", "warnings.warn", "<builtin>.len", "numpy.core.arrayprint._array2string"], "numpy.core._methods._count_reduce_items": ["<builtin>.tuple", "<builtin>.range", "<builtin>.isinstance"], "numpy.ma.core._replace_dtype_fields": ["numpy.ma.core._replace_dtype_fields_recursive"], "numpy.ma.core.make_mask_none": ["numpy.ma.core.make_mask_descr"], "numpy.ma.core.default_fill_value": ["numpy.ma.core._get_dtype_of", "numpy.ma.core._recursive_fill_value"], "numpy.ma.core._recursive_set_fill_value": ["<builtin>.len", "<builtin>.zip", "<builtin>.tuple", "numpy.ma.core._recursive_set_fill_value"], "numpy.compat._inspect.formatargspec": ["<builtin>.len", "<builtin>.range", "numpy.compat._inspect.strseq"], "numpy.compat._inspect.getargspec": ["numpy.compat._inspect.ismethod", "numpy.compat._inspect.isfunction", "<builtin>.TypeError", "numpy.compat._inspect.getargs"], "numpy.lib.type_check.imag": ["numpy.core.numeric.asanyarray"], "numpy.core.arrayprint._make_options_dict": ["<builtin>.locals", "<builtin>.bool", "<builtin>.ValueError", "warnings.warn", "<builtin>.isinstance"], "numpy.core.arrayprint._array2string": ["numpy.core.numeric.asarray", "numpy.core.arrayprint._leading_trailing", "numpy.core.arrayprint._get_format_function", "<builtin>.len", "numpy.core.arrayprint._formatArray"], "numpy.ma.core._replace_dtype_fields_recursive": ["<builtin>.list", "<builtin>.len", "<builtin>.tuple"], "numpy.ma.core._get_dtype_of": ["<builtin>.isinstance", "<builtin>.hasattr"], "numpy.ma.core._recursive_fill_value": ["<builtin>.tuple", "numpy.ma.core._recursive_fill_value"], "numpy.compat._inspect.strseq": ["<builtin>.type", "numpy.compat._inspect.strseq"], "numpy.compat._inspect.ismethod": ["<builtin>.isinstance"], "numpy.compat._inspect.isfunction": ["<builtin>.isinstance"], "numpy.compat._inspect.getargs": ["numpy.compat._inspect.iscode", "<builtin>.TypeError", "<builtin>.list", "<builtin>.range"], "numpy.core.arrayprint._leading_trailing": ["<builtin>.len", "numpy.core.multiarray.concatenate", "numpy.core.arrayprint._leading_trailing"], "numpy.core.arrayprint._get_format_function": ["numpy.core.arrayprint._get_formatdict", "<builtin>.issubclass", "numpy.core.arrayprint.StructuredVoidFormat.from_data"], "numpy.core.arrayprint._formatArray": ["<builtin>.len", "<builtin>.range", "numpy.core.arrayprint._extendLine", "<builtin>.max"], "numpy.compat._inspect.iscode": ["<builtin>.isinstance"], "numpy.core.arrayprint._get_formatdict": ["numpy.core.arrayprint.BoolFormat.__init__", "numpy.core.arrayprint.IntegerFormat.__init__", "numpy.core.arrayprint.FloatingFormat.__init__", "numpy.core.arrayprint.ComplexFloatingFormat.__init__", "numpy.core.arrayprint.DatetimeFormat.__init__", "numpy.core.arrayprint.TimedeltaFormat.__default_init__"], "numpy.core.arrayprint.StructuredVoidFormat.from_data": ["numpy.core.arrayprint._get_format_function", "numpy.core.arrayprint.SubArrayFormat.__init__"], "numpy.core.arrayprint._extendLine": ["<builtin>.len"], "numpy.core.arrayprint.IntegerFormat.__init__": ["<builtin>.max", "<builtin>.len", "<builtin>.str"], "numpy.core.arrayprint.FloatingFormat.__init__": ["<builtin>.isinstance", "numpy.core.arrayprint._none_or_positive_arg", "numpy.core.arrayprint.FloatingFormat.fillFormat"], "numpy.core.arrayprint.ComplexFloatingFormat.__init__": ["<builtin>.isinstance", "numpy.core.arrayprint.FloatingFormat.__init__"], "numpy.core.arrayprint.DatetimeFormat.__init__": ["numpy.core.arrayprint._TimelikeFormat.__init__", "<builtin>.super"], "numpy.core.arrayprint.TimedeltaFormat.__default_init__": ["numpy.core.arrayprint._TimelikeFormat.__init__"], "numpy.core.arrayprint._none_or_positive_arg": ["<builtin>.ValueError"], "numpy.core.arrayprint.FloatingFormat.fillFormat": ["<builtin>.len", "numpy.core.numeric.errstate.__init__", "<builtin>.zip", "<builtin>.max", "numpy.core.fromnumeric.any"], "numpy.core.arrayprint._TimelikeFormat.__init__": ["<builtin>.len", "<builtin>.max", "numpy.core.arrayprint._TimelikeFormat._format_non_nat"]}